{"version":3,"sources":["auditz.js"],"names":["assert","require","equal","debug","warn","options","rest","silenceWarnings","Model","bootOptions","modelName","app","createdAt","updatedAt","deletedAt","createdBy","updatedBy","deletedBy","softDelete","unknownUser","remoteCtx","scrub","required","validateUpsert","revisions","name","idType","dataSource","autoUpdate","revisionsModelName","properties","definition","idName","scrubbed","propertiesToScrub","Array","isArray","filter","prop","reduce","obj","settings","pluralModelName","defineProperty","type","Date","defaultFn","Number","observe","ctx","next","currentUser","req","accessToken","userId","getApp","err","a","ipForwarded","ip","headers","connection","remoteAddress","groups","count","forEach","group","createOrUpdateRevision","length","isNewInstance","models","create","action","table_name","row_id","instance","id","old","new","user","ip_forwarded","delete","oldInstance","oldInstances","entries","map","inst","updatedIds","newInst","query","where","inq","find","error","newInstances","data","cloneKey","key","from","to","parts","split","toObject","fromObject","index","cb","rec","order","findOne","res","recNew","JSON","parse","recOld","console","log","getOldInstance","args","findById","deleted","result","skipUpdatedAt","keyAt","keyBy","destroyAll","softDestroyAll","callback","updateAll","then","catch","reject","remove","deleteAll","destroyById","softDestroyById","opt","undefined","newOpt","removeById","deleteById","prototype","destroy","softDestroy","updateAttributes","queryNonDeleted","_findOrCreate","findOrCreate","findOrCreateDeleted","and","call","_find","findDeleted","_count","countDeleted","whereNotDeleted","_update","update","updateDeleted","_setupRevisionsModel","opts","dsName","rowIdType","_createModel","revisionsDef","s","plural","revisionsModel","dataSources","createModel","model","autoupdate"],"mappings":"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","file":"auditz.js","sourcesContent":["import _debug from './debug';\nconst assert = require('assert');\nvar equal = require('deep-equal');\n\nconst debug = _debug();\nconst warn = (options, ...rest) => {\n  if (!options.silenceWarnings) {\n    console.warn(...rest);\n  }\n};\n\nexport default (Model, bootOptions = {}) => {\n  debug('Auditz mixin for Model %s', Model.modelName);\n  let app;\n\n  const options = Object.assign({\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n    deletedAt: 'deletedAt',\n    createdBy: 'createdBy',\n    updatedBy: 'updatedBy',\n    deletedBy: 'deletedBy',\n    softDelete: true,\n    unknownUser: 0,\n    remoteCtx: 'remoteCtx',\n    scrub: false,\n    required: true,\n    validateUpsert: false, // default to turning validation off\n    silenceWarnings: false,\n    revisions: {\n      name: 'revisions',\n      idType: 'Number',\n      dataSource: 'db',\n      autoUpdate: true,\n    },\n  }, bootOptions);\n\n  options.revisionsModelName = (typeof options.revisions === 'object' && options.revisions.name) ?\n    options.revisions.name : 'revisions';\n  debug('options', options);\n\n  const properties = Model.definition.properties;\n  const idName = Model.dataSource.idName(Model.modelName);\n\n  let scrubbed = {};\n  if (options.softDelete) {\n    if (options.scrub !== false) {\n      let propertiesToScrub = options.scrub;\n      if (!Array.isArray(propertiesToScrub)) {\n        propertiesToScrub = Object.keys(properties)\n          .filter(prop => !properties[prop][idName] && prop !== options.deletedAt && prop !== options.deletedBy);\n      }\n      scrubbed = propertiesToScrub.reduce((obj, prop) => ({ ...obj, [prop]: null }), {});\n    }\n  }\n\n  if (!options.validateUpsert && Model.settings.validateUpsert) {\n    Model.settings.validateUpsert = false;\n    warn(options, `${Model.pluralModelName} settings.validateUpsert was overridden to false`);\n  }\n\n  if (Model.settings.validateUpsert && options.required) {\n    warn(options, `Upserts for ${Model.pluralModelName} will fail when\n          validation is turned on and time stamps are required`);\n  }\n\n  Model.settings.validateUpsert = options.validateUpsert;\n\n  if (options.createdAt !== false) {\n    if (typeof(properties[options.createdAt]) === 'undefined') {\n      Model.defineProperty(options.createdAt, {type: Date, required: options.required, defaultFn: 'now'});\n    }\n  }\n\n  if (options.updatedAt !== false) {\n    if (typeof(properties[options.updatedAt]) === 'undefined') {\n      Model.defineProperty(options.updatedAt, {type: Date, required: options.required});\n    }\n  }\n\n  if (options.createdBy !== false) {\n    if (typeof(properties[options.createdBy]) === 'undefined') {\n      Model.defineProperty(options.createdBy, {type: Number, required: false});\n    }\n  }\n\n  if (options.updatedBy !== false) {\n    if (typeof(properties[options.updatedBy]) === 'undefined') {\n      Model.defineProperty(options.updatedBy, {type: Number, required: false});\n    }\n  }\n\n  if (options.softDelete) {\n    if (typeof(properties[options.deletedAt]) === 'undefined') {\n      Model.defineProperty(options.deletedAt, {type: Date, required: false});\n    }\n    if (typeof(properties[options.deletedBy]) === 'undefined') {\n      Model.defineProperty(options.deletedBy, {type: Number, required: false});\n    }\n  }\n\n  Model.observe('after save', (ctx, next) => {\n    if (!options.revisions) {\n      return next();\n    }\n    debug('ctx.options', ctx.options);\n\n    // determine the currently logged in user. Default to options.unknownUser\n    let currentUser = options.unknownUser;\n\n    if (ctx.options[options.remoteCtx]) {\n      if (ctx.options[options.remoteCtx].req.accessToken) {\n        currentUser = ctx.options[options.remoteCtx].req.accessToken.userId;\n      }\n    }\n\n    Model.getApp((err, a) => {\n      if (err) { return next(err); }\n      app = a;\n      let ipForwarded = '';\n      let ip = '127.0.0.1';\n      if (ctx.options.remoteCtx) {\n        ipForwarded = ctx.options.remoteCtx.req.headers['x-forwarded-for'];\n        ip = ctx.options.remoteCtx.req.connection.remoteAddress;\n      }\n      let groups = options.revisions.groups;\n      if (groups && Array.isArray(groups)) {\n          let count = 0;\n          groups.forEach(function (group) {\n              createOrUpdateRevision(ctx, group, currentUser, ipForwarded, ip, function () {\n                  count += 1;\n                  if (count === groups.length) {\n                      next();\n                  }\n              });\n          });\n          return;\n      }\n      // If it's a new instance, set the createdBy to currentUser\n      if (ctx.isNewInstance) {\n        app.models[options.revisionsModelName].create({\n          action: 'create',\n          table_name: Model.modelName,\n          row_id: ctx.instance.id,\n          old: null,\n          new: ctx.instance,\n          user: currentUser,\n          ip: ip,\n          ip_forwarded: ipForwarded,\n        }, next);\n      } else {\n        if (ctx.options && ctx.options.delete) {\n          if (ctx.options.oldInstance) {\n            app.models[options.revisionsModelName].create({\n              action: 'delete',\n              table_name: Model.modelName,\n              row_id: ctx.options.oldInstance.id,\n              old: ctx.options.oldInstance,\n              new: null,\n              user: currentUser,\n              ip: ip,\n              ip_forwarded: ipForwarded,\n            }, next);\n          } else if (ctx.options.oldInstances) {\n            const entries = ctx.options.oldInstances.map(inst => {\n              return {\n                action: 'delete',\n                table_name: Model.modelName,\n                row_id: inst.id,\n                old: inst,\n                new: null,\n                user: currentUser,\n                ip: ip,\n                ip_forwarded: ipForwarded,\n              };\n            });\n            app.models[options.revisionsModelName].create(entries, next);\n          } else {\n            debug('Cannot register delete without old instance! Options: %j', ctx.options);\n            return next();\n          }\n        } else {\n          if (ctx.options.oldInstance && ctx.instance) {\n            const inst = ctx.instance;\n            app.models[options.revisionsModelName].create({\n              action: 'update',\n              table_name: Model.modelName,\n              row_id: inst.id,\n              old: ctx.options.oldInstance,\n              new: inst,\n              user: currentUser,\n              ip: ip,\n              ip_forwarded: ipForwarded,\n            }, next);\n          } else if (ctx.options.oldInstances) {\n            const updatedIds = ctx.options.oldInstances.map(inst => { return inst.id; });\n            let newInst = {};\n            const query = {where: {[ idName ]: {inq: updatedIds}}};\n            app.models[Model.modelName].find(query, (error, newInstances) => {\n              if (error) { return next(error); }\n              newInstances.forEach(inst => {\n                newInst[ inst[ idName ] ] = inst;\n              });\n              const entries = ctx.options.oldInstances.map(inst => {\n                return {\n                  action: 'update',\n                  table_name: Model.modelName,\n                  row_id: inst.id,\n                  old: inst,\n                  new: newInst[inst.id],\n                  user: currentUser,\n                  ip: ip,\n                  ip_forwarded: ipForwarded,\n                };\n              });\n              app.models[options.revisionsModelName].create(entries, next);\n            });\n          } else {\n            debug('Cannot register update without old and new instance. Options: %j', ctx.options);\n            debug('instance: %j', ctx.instance);\n            debug('data: %j', ctx.data);\n            return next();\n          }\n        }\n      }\n    });\n  });\n\n  function cloneKey(key, from, to) {\n    let parts = key.split('.');\n\n    let toObject = to;\n    let fromObject = from;\n\n    parts.forEach(function (key, index) {\n      if(index === parts.length - 1) {\n        toObject[key] = fromObject && fromObject[key];\n      }else {\n        if (!toObject[key]) {\n          toObject[key] = {}; \n        }\n      }\n\n      fromObject = fromObject && fromObject[key];\n      toObject = toObject[key];\n    });\n  }\n\n  function createOrUpdateRevision(ctx, group, currentUser, ipForwarded, ip, cb) {\n    let data = {};\n    group.properties.forEach(function (key) {\n        cloneKey(key, ctx.instance, data);\n    });\n    debug(data);\n\n    let rec = {\n      table_name: Model.modelName,\n      row_id: ctx.instance.id,\n      new: data,\n      user: currentUser,\n      ip: ip,\n      ip_forwarded: ipForwarded,\n    };\n\n    if (ctx.isNewInstance) {\n      rec['action'] = 'create';\n      rec['old'] = null;\n      app.models[group.name].create(rec, cb);\n    } else {\n      let filter = {\n        order: 'created_at DESC'\n      };\n      app.models[group.name].findOne(filter, function(err, res) {\n        if (err || !res) {\n          rec['old'] = null;\n        }else {\n          let old = {};\n          //make sure the object is pure\n          group.properties.forEach(function (key) {\n            cloneKey(key, res.new, old);\n          });\n          rec['old'] = old;\n        }\n\n        rec['action'] = 'update';\n\n        //get away from undefined properties so compare can work\n        let recNew = JSON.parse(JSON.stringify(rec.new));\n        let recOld = rec.old && JSON.parse(JSON.stringify(rec.old));\n\n        if (rec.old && equal(recNew, recOld)) {\n            console.log('equal '+ group.name);\n            return cb();\n        }\n        app.models[group.name].create(rec, cb);\n      });\n    }\n  }\n\n  function getOldInstance(ctx, cb) {\n    if (options.revisions) {\n      if (typeof ctx.isNewInstance === 'undefined' || !ctx.isNewInstance) {\n        let id = ctx.instance ? ctx.instance.id : null;\n        if (!id) {\n          id = ctx.data ? ctx.data.id : null;\n        }\n        if (!id && ctx.where) {\n          id = ctx.where.id;\n        }\n        if (!id && ctx.options.remoteCtx) {\n          id = ctx.options.remoteCtx.req && ctx.options.remoteCtx.req.args ?\n            ctx.options.remoteCtx.req.args.id : null;\n        }\n        if (id) {\n          Model.findById(id, {deleted: true}, (err, oldInstance) => {\n            if (err) { cb(err); } else { cb(null, oldInstance); }\n          });\n        } else {\n          const query = {where: ctx.where} || {};\n          Model.find(query, (err, oldInstances) => {\n            if (err) {\n              cb(err);\n            } else {\n              if (oldInstances.length > 1) {\n                return cb(null, oldInstances);\n              } else if (oldInstances.length === 0) {\n                return cb();\n              }\n              cb(null, oldInstances[0]);\n            }\n          });\n        }\n      } else {\n        cb();\n      }\n    } else {\n      cb();\n    }\n  }\n\n  Model.observe('before save', (ctx, next) => {\n    const softDelete = ctx.options.delete;\n\n    getOldInstance(ctx, (err, result) => {\n      if (err) {\n        console.error(err);\n        return next(err);\n      }\n\n      if (Array.isArray(result)) {\n        ctx.options.oldInstances = result;\n      } else {\n        ctx.options.oldInstance = result;\n      }\n      // determine the currently logged in user. Default to options.unknownUser\n      let currentUser = options.unknownUser;\n\n      if (ctx.options[options.remoteCtx]) {\n        if (ctx.options[options.remoteCtx].req.accessToken) {\n          currentUser = ctx.options[options.remoteCtx].req.accessToken.userId;\n        }\n      }\n\n      // If it's a new instance, set the createdBy to currentUser\n      if (ctx.isNewInstance) {\n        debug('Setting %s.%s to %s', ctx.Model.modelName, options.createdBy, currentUser);\n        ctx.instance[options.createdBy] = currentUser;\n      } else {\n        // if the createdBy and createdAt are sent along in the data to save, remove the keys\n        // as we don't want to let the user overwrite it\n        if (ctx.instance) {\n          delete ctx.instance[options.createdBy];\n          delete ctx.instance[options.createdAt];\n        } else {\n          delete ctx.data[options.createdBy];\n          delete ctx.data[options.createdAt];\n        }\n      }\n\n      if (ctx.options && ctx.options.skipUpdatedAt) { return next(); }\n      let keyAt = options.updatedAt;\n      let keyBy = options.updatedBy;\n      if (options.softDelete) {\n        // Since soft deletes replace the actual delete by an update, we set the option\n        // 'delete' in the overridden delete functions that perform updates.\n        // We now have to determine if we need to set updatedAt/updatedBy or\n        // deletedAt/deletedBy\n        if (softDelete) {\n          keyAt = options.deletedAt;\n          keyBy = options.deletedBy;\n        }\n      }\n      if (ctx.instance) {\n        ctx.instance[keyAt] = new Date();\n        ctx.instance[keyBy] = currentUser;\n      } else {\n        ctx.data[keyAt] = new Date();\n        ctx.data[keyBy] = currentUser;\n      }\n      return next();\n    });\n  });\n\n  if (options.softDelete) {\n    Model.destroyAll = function softDestroyAll(where, cb) {\n      let query = where || {};\n      let callback = cb;\n      if (typeof where === 'function') {\n        callback = where;\n        query = {};\n      }\n      return Model.updateAll(query, { ...scrubbed }, {delete: true})\n        .then(result => (typeof callback === 'function') ? callback(null, result) : result)\n        .catch(error => (typeof callback === 'function') ? callback(error) : Promise.reject(error));\n    };\n\n    Model.remove = Model.destroyAll;\n    Model.deleteAll = Model.destroyAll;\n\n    Model.destroyById = function softDestroyById(id, opt, cb) {\n      const callback = (cb === undefined && typeof opt === 'function') ? opt : cb;\n      let newOpt = {delete: true};\n      if (typeof opt === 'object') {\n        newOpt.remoteCtx = opt.remoteCtx;\n      }\n\n      return Model.updateAll({ [idName]: id }, { ...scrubbed}, newOpt)\n        .then(result => (typeof callback === 'function') ? callback(null, result) : result)\n        .catch(error => (typeof callback === 'function') ? callback(error) : Promise.reject(error));\n    };\n\n    Model.removeById = Model.destroyById;\n    Model.deleteById = Model.destroyById;\n\n    Model.prototype.destroy = function softDestroy(opt, cb) {\n      const callback = (cb === undefined && typeof opt === 'function') ? opt : cb;\n\n      return this.updateAttributes({ ...scrubbed }, {delete: true})\n        .then(result => (typeof cb === 'function') ? callback(null, result) : result)\n        .catch(error => (typeof cb === 'function') ? callback(error) : Promise.reject(error));\n    };\n\n    Model.prototype.remove = Model.prototype.destroy;\n    Model.prototype.delete = Model.prototype.destroy;\n\n    // Emulate default scope but with more flexibility.\n    const queryNonDeleted = {[options.deletedAt]: null};\n\n    const _findOrCreate = Model.findOrCreate;\n    Model.findOrCreate = function findOrCreateDeleted(query = {}, ...rest) {\n      if (!query.deleted) {\n        if (!query.where || Object.keys(query.where).length === 0) {\n          query.where = queryNonDeleted;\n        } else {\n          query.where = { and: [ query.where, queryNonDeleted ] };\n        }\n      }\n\n      return _findOrCreate.call(Model, query, ...rest);\n    };\n\n    const _find = Model.find;\n    Model.find = function findDeleted(query = {}, ...rest) {\n      if (!query.deleted) {\n        if (!query.where || Object.keys(query.where).length === 0) {\n          query.where = queryNonDeleted;\n        } else {\n          query.where = { and: [ query.where, queryNonDeleted ] };\n        }\n      }\n\n      return _find.call(Model, query, ...rest);\n    };\n\n    const _count = Model.count;\n    Model.count = function countDeleted(where = {}, ...rest) {\n      // Because count only receives a 'where', there's nowhere to ask for the deleted entities.\n      let whereNotDeleted;\n      if (!where || Object.keys(where).length === 0) {\n        whereNotDeleted = queryNonDeleted;\n      } else {\n        whereNotDeleted = { and: [ where, queryNonDeleted ] };\n      }\n      return _count.call(Model, whereNotDeleted, ...rest);\n    };\n\n    const _update = Model.update;\n    Model.update = Model.updateAll = function updateDeleted(where = {}, ...rest) {\n      // Because update/updateAll only receives a 'where', there's nowhere to ask for the deleted entities.\n      let whereNotDeleted;\n      if (!where || Object.keys(where).length === 0) {\n        whereNotDeleted = queryNonDeleted;\n      } else {\n        whereNotDeleted = { and: [ where, queryNonDeleted ] };\n      }\n      return _update.call(Model, whereNotDeleted, ...rest);\n    };\n  }\n\n  function _setupRevisionsModel(app, opts) {\n    const autoUpdate = (opts.revisions === true || (typeof opts.revisions === 'object' && opts.revisions.autoUpdate));\n    const dsName = (typeof opts.revisions === 'object' && opts.revisions.dataSource) ?\n      opts.revisions.dataSource : 'db';\n    const rowIdType = (typeof opts.revisions === 'object' && opts.revisions.idType) ?\n      opts.revisions.idType : 'Number';\n\n    if(opts.revisions && typeof opts.revisions === 'object' && \n       opts.revisions.groups && opts.revisions.groups.length) {\n      opts.revisions.groups.forEach(function (group) {\n          if (!app.models[group.name]) {\n              _createModel(opts, dsName, autoUpdate, rowIdType, group);\n          }\n      });\n    }else {\n      _createModel(opts, dsName, autoUpdate, rowIdType, options.revisionsModelName);\n    }\n  }\n\n  function _createModel(opts, dsName, autoUpdate, rowIdType, group) {\n    const revisionsDef = require('./models/revision.json');\n    let settings = {};\n    for (let s in revisionsDef) {\n      if (s !== 'name' && s !== 'properties') {\n        settings[s] = revisionsDef[s];\n      }\n    }\n\n    settings['plural'] = group.plural;\n\n    revisionsDef.properties.row_id.type = rowIdType;\n\n    const revisionsModel = app.dataSources[dsName].createModel(\n      group.name,\n      revisionsDef.properties,\n      settings\n    );\n    const revisions = require('./models/revision')(revisionsModel, opts);\n\n    app.model(revisions);\n\n\n    if (autoUpdate) {\n      // create or update the revisions table\n      app.dataSources[dsName].autoupdate([group.name], (error) => {\n        if (error) {console.error(error);}\n      });\n    }\n  }\n\n  if (options.revisions) {\n    Model.getApp((err, a) => {\n      if (err) { return console.error(err);}\n      app = a;\n      if (!app.models[options.revisionsModelName]) {\n        _setupRevisionsModel(app, options);\n      }\n    });\n  }\n};\n"],"sourceRoot":"/Users/rumen/Work/CIP/loopback-auditz/src"}